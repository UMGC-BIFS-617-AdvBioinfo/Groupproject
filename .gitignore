
import re
import os

#Author Karina Brignoni

def startup_message():
    print("This program will find the orfs in your sequence.\nYou will enter your sequence file name then press enter to continue")
    
def get_orflength():
    orf_length=eval(input("enter the minimum orf's length "))#ask for length orf
    return orf_length
def getfile_info():
    my_seq=input("Enter your file name\n")#ask name of file
    info={}#creates dictionary
    with open(my_seq)as file:#open file
        for line in file:
            line=line.upper().rstrip('\n').replace("-","").replace(" ","")#convert to upper,get rid of newlines and gaps
            if line.startswith('>'):
                header=line[1:]
                info[header]=''#Here we have the dictionary info with the key header that have all the lines that start with >, there is no value yet
                continue
            else:
                info[header]=info[header]+line #here we add the value(the lines that do not have >
    #print("This is the info dictionary:" ) #comment this out in final code
    #print(info) #comment this out in final code. 
    return info




#Author Sandra Shannon
#This function will be used to complement ande reverse the values in the 
    #info dictionary created by Karina's code 
    #It makes a new dictionary 
    #The key= the same key from info dictionary "Accession#/name"
    #The value= the seq complemted and reversed.
def makereverse(seq): #Author Sandra Shannon
    #first change from upper to lowercase
    seqA2t=seq.replace("A","t")
    seqT2a=seqA2t.replace("T","a")
    seqC2g=seqT2a.replace("C", "g")
    seqG2c=seqC2g.replace("G","c")
    seqdnacomp=seqG2c.upper()
    seqdnareversed=seqdnacomp[::-1] #Author Karina Brignoni
    #print(seqdnareversed)
    return seqdnareversed

#Author Sandra Shannon
#This code splits the DNA seq into codons if can be ran on the sequences 
# This function is used inside the finding frames functions. 
#It only works on one sequence at a time 
#The output is a string. 
def splitintocodon(DNAseq): #Author Sandra Shannon
    #Calculates where the last codon should start. 
    last_codon_start=len(DNAseq)-2
    codon_list=[]
    #loop to make codons if 1st frame
    for start in range(0, last_codon_start, 3):
        codon=DNAseq[start:start+3]+" "
        codon_list.append(codon)
    #print(codon_list)
    codon_string=''
    codon_string=codon_string.join(codon_list)
    lastchart=len(codon_string)
    Newseq=codon_string[0:lastchart-1]
    #print(codon_string)
    #print(Newseq)
    return Newseq

#function for getting the foward Frames(1,2,3) it works on
    # info dictionary createdby Karina's code  
    # It makes a new dictionary for the foward frames
    # The key = >Accession#/name_of_seq | Frame#
    # The value= the seq for that frame split into codons. 

#Author Sandra Shannon
def findingframes(seq):
    nextstartbase=0
    rnextstartbase=0
    frameconter=1
    rframeconter=-4
    frames={}
    for key, value in seq.items():
        seq=value
        for start in range(0,3):
            seqofframe=seq[nextstartbase:len(seq)]
            framekey=">"+key+"| Frame"+str(frameconter)
            #print("split into codon")
            framevalue=splitintocodon(seqofframe)
            frames[framekey]=framevalue
            #print(frames)
            nextstartbase+=1
            frameconter+=1
        for start in range(0,3):
            rseq=makereverse(seq)
            rseqofframe=rseq[rnextstartbase:len(rseq)]
            rframekey=">"+key+"| Frame="+str(rframeconter)
            #print("split into codon")
            rframevalue=splitintocodon(rseqofframe)
            frames[rframekey]=rframevalue
            #print(frames)
            rnextstartbase+=1
            rframeconter-=1
        rframeconter=-4
        frameconter=1
        nextstartbase=0
        rnextstartbase=0
    #print("This is the frames:", frames) #comment this out in the final code 
    return frames



#function for getting the reverse Frames(4,5,6) it works on
    # on the reverse dictionary created by the makereverse(seq) function 
    # It makes a new dictionary for the reverse frames
    # The key = >Accession#/name_of_seq | Frame#
    # The value= the seq for that frame split into codons. 
#Author Sandra Shannon
# def findingframesreverse(seq): #Author Sandra Shannon
#     nextstartbase=0
#     frameconter=-4
#     frames={}
#     for key, value in seq.items():
#         for start in range(0,3):
#             seq=value
#             seqofframe=seq[nextstartbase:len(seq)]
#             framekey=">"+key+"| Frame="+str(frameconter)
#             framevalue=splitintocodon(seqofframe)
#             frames[framekey]=framevalue
#             #print(frames)
#             nextstartbase+=1
#             frameconter-=1
#         frameconter=-4
#     #print("This is the reverse frames:", frames) #comment this out in the final code 
#     return frames

#function for open reading frames.
# This function does not work correctly right now. 
#Author Kianna Blount
def findORF(seqtosearch, orf_length):
    ORFdic={}

    for key, value in seqtosearch.items():
        startpostion=[]
        stoppostion=[]
        seqs={}
        keyfullname=key
        min=orf_length
        Start=re.finditer(r"ATG", value)
        for match in Start:
            startcodon=match.start()
            startpostion.append(startcodon)
        Stop=re.finditer(r"(TAA|TAG|TGA)", value)
        for match in Stop:
            stopcodon=match.start()
            stoppostion.append(stopcodon)
        #print("\n\n\nStart postions:\n", startpostion ,"\n\nStop postions:\n", stoppostion)
        for postion in startpostion:
            start=postion
            for positon in stoppostion:
                stop=positon+3
                seq=value[start:stop]
                seqnospace=seq.replace(" ","")
                seqlen=len(seqnospace)
                if seqlen>=min:
                    newkey=keyfullname+" POS="+str(start+1) +" LEN="+str(seqlen)
                    seqs[start]=seq
                    #print(newkey+"\n"+seq)# remove in final code
                    ORFdic[newkey]=seq   
    return ORFdic
 
 #Author Seth Babin   
def output (filename, dic):
    newfile=open(filename, "w")
    newfile.write("The Open Reading Frames that were found:\n")
    print("The output is here:")
    for key,value in dic.items():
        print(key)
        print(value)
        newfile.write(key+ "\n")
        newfile.write(value+ "\n")
    newfile.close

# This is the main function will call the functions are called 
# It creats the program. 

#Author Sandra Shannon
def main():
    startup_message()
    Seqdic=getfile_info()
    orf_length=get_orflength()
    #print()
    allframes=findingframes(Seqdic)
    ORFdic=findORF(allframes, orf_length)
    #print()
    #print("this is the ORF dictiornay:", ORFdic)#remove in final code?
    
    #Author Seth Babin
    filename = 'group2_output.fasta'
    output(filename, ORFdic)
main()
   


#The FowardORFlist and ReverseORFlist are dictionarys That can be looped through to make the final output
    #This is the info that is in the dictionary
    #ORFdic{key=>Assesion | Frame=# POS=# LEN=# :  value=seq}
#then Seth could use a loop to loop through the dictionary and have it print to a file. 
